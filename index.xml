<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ami&#39;s Blog</title>
    <link>https://izayoi-ami.github.io/</link>
    <description>Recent content on Ami&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <lastBuildDate>Sat, 08 Apr 2017 01:51:48 +0300</lastBuildDate>
    
	<atom:link href="https://izayoi-ami.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Second maximum/minimum tournament tree</title>
      <link>https://izayoi-ami.github.io/2017/04/08/second-maximum/minimum-tournament-tree/</link>
      <pubDate>Sat, 08 Apr 2017 01:51:48 +0300</pubDate>
      
      <guid>https://izayoi-ami.github.io/2017/04/08/second-maximum/minimum-tournament-tree/</guid>
      <description>Given an array of \(N\) elements, return the second maximum/minimum elements using minimum number of comparison. A standard way for this task is to apply a tree and keep track of a list of compared items.
However, it is important to realize that this optimal is achieved only when the elements are distinct. Otherwise, one can end up comparing an extra half of the whole array.
For example, to locate the second minimum of the following array:</description>
    </item>
    
    <item>
      <title>Multidimensional local minimum search</title>
      <link>https://izayoi-ami.github.io/2017/04/07/multidimensional-local-minimum-search/</link>
      <pubDate>Fri, 07 Apr 2017 10:10:57 +0300</pubDate>
      
      <guid>https://izayoi-ami.github.io/2017/04/07/multidimensional-local-minimum-search/</guid>
      <description>An element in a multi-dimensional array is said to be a local minimum if it is greater -than- none of its neighbours.
In the one-dimensional case, a logarithmic solution is based on bisection (and advancing to the greater than the middle half).
2-dimensional Let \(A\) be a \(N\times N\) matrix. Can one locate a local minimum within linear time?
The idea is to consider bisection and boundary search. First, locate the midpoint, which then divide the matrix into 4 sub-regions.</description>
    </item>
    
  </channel>
</rss>